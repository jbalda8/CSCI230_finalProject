Joshua Balda
Final Project Proposal

Summary: 

My proposed project title is "A Battleship Game." The primary goal is to create a battleship type game by using
"lists inside of a list" (aka a matrix), to represent a virtual grid with rows 1-10 and columns A-J (10x10).
There are normally two ways this game can be played, player vs player or player vs computer. To make the player
vs player game, I would need to find a way to allow the game to be played on seperate devices. Although, it could
work on a single device, it would not really make sense to do so. Some of my beginning thoughts to do this
is implement my game on a website (HTML) and have the game done over a network, which can be difficult.
Although, a good player vs computer game would in my mind be even more difficult. I could just make a program that
has the computer randomely guess each time, but it could be a lot better. If the computer was able to learn
from it's results, this could be a much better game. I could use a bunch of if statements, but I know there
are better "machine learning" ways to do things that I may look into later. For now, I will begin by simplfying
the game a bit. It will essentially be a "one way" battleship game. What I mean by that is the computer will
randomely generate a battleship board with one 5 piece ship, one 4 piece ship, two three piece ships and one
two piece ship. I will need to make sure the computer does not overlap pieces, and that the pieces are horizontal
or vertical. I will then be given the oppurtunity to guess where the ships are. The computer will then tell me if I "hit"
or "missed" a piece. Each time I guess the board will update. The first board will just be a 10x10 matrix of zero entries.
If my guess was a miss, that specific grid entry will change to something like "m" and if I hit the piece, that grid entry
will change to a "x". To make the game more interesting. I will only be allowed, lets say 40 attempts. If I don't sink all 
the ships in time, I lose. I will need to mess around with the attempts, I am not sure yet what a reasonable amount would be.
Maybe I can ask the user if they want to play the hard, medium, or easy version. No databases will need to be used for this
project. If I decide to make my game player vs player, I would need to create a user interface that allows both players to
view their own board and what they have guessed about the other players board.    


Use Case Analysis (Sample game)
P
Welcome to "A Battleship Game"
Select your game difficulty:

1) Easy (50 Att)
2) Medium (40 Att)
3) Hard (30 Att)

What is your choice: 2

You have selected "Medium"
Type "Confirm" to confirm or "Back" to go back: Confirm


	Current Board:

    A B C D E F G H I J
1   0 0 0 0 0 0 0 0 0 0
2   0 0 0 0 0 0 0 0 0 0
3   0 0 0 0 0 0 0 0 0 0
4   0 0 0 0 0 0 0 0 0 0
5   0 0 0 0 0 0 0 0 0 0
6   0 0 0 0 0 0 0 0 0 0
7   0 0 0 0 0 0 0 0 0 0
8   0 0 0 0 0 0 0 0 0 0
9   0 0 0 0 0 0 0 0 0 0
10  0 0 0 0 0 0 0 0 0 0

What is your guess: D7

Miss! You have 39 guesses left

	Current Board:

    A B C D E F G H I J
1   0 0 0 0 0 0 0 0 0 0
2   0 0 0 0 0 0 0 0 0 0
3   0 0 0 0 0 0 0 0 0 0
4   0 0 0 0 0 0 0 0 0 0
5   0 0 0 0 0 0 0 0 0 0
6   0 0 0 0 0 0 0 0 0 0
7   0 0 0 M 0 0 0 0 0 0
8   0 0 0 0 0 0 0 0 0 0
9   0 0 0 0 0 0 0 0 0 0
10  0 0 0 0 0 0 0 0 0 0

What is your guess: H8

Hit! You have 38 guesses left

	Current Board:

    A B C D E F G H I J
1   0 0 0 0 0 0 0 0 0 0
2   0 0 0 0 0 0 0 0 0 0
3   0 0 0 0 0 0 0 0 0 0
4   0 0 0 0 0 0 0 0 0 0
5   0 0 0 0 0 0 0 0 0 0
6   0 0 0 0 0 0 0 0 0 0
7   0 0 0 M 0 0 0 0 0 0
8   0 0 0 0 0 0 0 X 0 0
9   0 0 0 0 0 0 0 0 0 0
10  0 0 0 0 0 0 0 0 0 0


Note that this is the most basic version. There is a lot to add, but here is a start.

Data Design:

My program is really just a bunch of arrays. Each array is a row of data. Key information is kept within these arrays.
Such as 0, 1, M, or X, each of which have meaning. Other sets of data is the user guesses. This will help prevent the user from guessing
a spot they have already guessed. Depending on how I decide to input the battleship pieces, I may create another list of arrays to keep
track of what "grid spots" are filled. That way pieces don't overlap. Both of these things will help me keep my data persistent. Data of
where the battleship pieces are, need to be put into the "game board" by essentially changing the value of that specific entry. For example,
the original array has all entries of 0, but pieces will be added in a horizontal or vertical mannar, by changing some of the 0's to 1's.
 

Beginning array:                         Array for each piece:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],         Five Piece [1, 1, 1, 1, 1]               
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],          Four Piece [1, 1, 1, 1]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],          Three Piece [[1, 1, 1, 1], [1, 1, 1, 1]]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],          Two Piece [1, 1]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]


Example array after piece implementation (computer's board):          
[[1, 1, 1, 0, 0, 0, 0, 0, 0, 0],                                    
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],          
[0, 0, 0, 0, 1, 1, 1, 1, 0, 0],          
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0],         
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]            

Example array after some guesses (computer's board):

[[X, X, X, 0, 0, M, 0, M, 0, 0],                                    
[0, M, 0, 0, 0, 0, 0, 0, 0, 0],          
[0, 0, 0, 0, 1, 1, 1, 1, 0, 0],          
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0],         
[0, M, 1, 0, 0, 0, 0, M, 0, 0],
[0, 0, 1, 0, 0, 0, 0, X, M, 0],
[0, 0, 1, 0, 0, 0, 0, X, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
[0, 0, M, 0, 0, 0, M, 0, 0, 0]] 

Array of player guesses (to make sure user does not guess something they already guessed): ['A1', 'D6', 'B9']

I also may create an array of all possible grid values, to check user input. Instead of typing all values, I can create 'for' statements that do it for me.
Kind of like how my card names were created in my card game program.

Note, I will probably color code things to make it more clear and organized. Like all X's could be red, M's could be blue, and 0's could be default (black).

Algorithm:

1) Beginning array is created with all 0 entries.

2) Array of all possible grid guesses is created to check user input.

3) An empty array of userGuesses can also be created for later purposes.

2) Pieces are added to array as follows:

5 Piece: A random 50/50 event is picked to choose if this piece is horizontal or vertical. A random row and column is picked (can not be everywhere though), and can be thought of as this pieces 
starting point. A '1' is added to this spot. If the piece was chosen to be vertical, the column will never change, but 1's will be added to each consecutive row (same column) after the starting point. 
To make sure this piece does not go over the last row, I will need to make sure its "starting point" always has atleast 4 spaces below it. This first piece is quite simple, because there aren't
any other pieces on the board yet, which is why I start with the longest piece. For a horizontal piece, the opposite will follow (the row will not change, just the column). In this case, I will 
need to make sure the "starting point" has atleast 4 spaces to the right of it.

All other pieces: I am not gonna list the last 4 pieces individually, because they all have almost identical algorithms. Since there will be other pieces on the board, I will need to find a way
to prevent pieces from overlapping. A random event will still occur to determine if each piece is horizontal or vertical, and a random "starting point" will still be chosen too. I am sure there are
several ways to go about preveting overlaps, but here is a way I could do it (I am still up for recomondations). For these last 4 pieces only, instead of "changing" the zero entry to a 1 like I 
could do for the "five" piece, I would add '1' to its original value. So if the original value is 0, no biggy, 1 is added. If 1 is already in that spot, i.e. a piece is already in that spot,
the value will change to 2 (aka 1+1). This will trigger my preventional mechanism, and I can backtrack everything and restart with a different "starting point." This will be done until the piece
is able to be put into the array, without overlapping another piece. Just like the five piece, I will also need to make sure the piece has enough room from the right or bottom of the board. Depending
on if the piece is horizontal or vertical.   

3) Once the pieces are successfully implemented into the "board." The game will officially start. The user will first be asked to choose which difficulty they want. This is a simple input function.
This relates to how many attempts the user gets to "win" the game.

4) The userBoard of all zeroes is printed out in a nice organized mannar with column and row values listed. The user board is identical to the beginning board, however, the beginning board
changes into the computer's board when pieces are added. This board will never be shown, or else that ruins the point of the game. 

5) The user will begin by guessing a grid value. This grid value has to be a possible value, or an error message will occur. This guess is added to the empty array.

6) If this spot (column,row) corresponds to a '1' on the computer's board, the user will be told that they 'hit' a piece. On the userBoard, the spot corresponding to
this is changed to X. The same follows for a miss, although the value is changed to 'M' and the user is told they missed. The values of '1' that are guessed by the user,
will also be changed to X on the computer's board.

7) This process follows until the user runs out of attempts, or there are no more '1' entries on computer's board. If the user runs out of attempts, they lose, and if they 
"sink" all ships they win (no more 1's on computer board). After every user guess, there updated board is printed.  


Othernotes:

One thing that might be useful is finding a way to tell the user when they sink a ship. For example, if they have three pieces in a row as X, they may not know if that is a three
piece ship they just sunk, or part of another, bigger ship. For now, I am starting with this, but I hope to be able to implement this useful part into my program later on.  








